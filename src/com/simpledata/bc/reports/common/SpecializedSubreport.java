/* Copyright (c) 2003 to 2007 SimpleData Sarl http://simpledata.ch   * All rights reserved. * * This file is part of TariffEye Software  realeased under the  * GNU Public License. Redistributions of source code and binaries  * must retain the above copyright notice; see COPYING_Tariff-Eye.txt  * *//** * @author Simpledata SARL, 2004, all rights reserved.  * @version $Id: SpecializedSubreport.java,v 1.2 2007/04/02 17:04:26 perki Exp $ *//** * Package containing all classes that generate a report.  * It relies heavily on the toolbox in base.  */package com.simpledata.bc.reports.common;import com.simpledata.bc.reports.base.Subreport;import com.simpledata.bc.reports.base.SubreportTreeItem;/**  * Type that defines what a specialized subreport must provide * for working with ReportFactory.  */public abstract class SpecializedSubreport {		/** Internal storage of all report data. */	protected Subreport m_report; 		/**	 * Add one row of data using the local specialization 	 * of the data row abstraction. 	 * 	 * DataRow is best defined an inner class of your Report	 * class and should define all the fields that form one 	 * row of data in your report. 	 * @param row Row to add to report. 	 */	public void addData( SpecializedDataRow row ) {		m_report.addRow( row.toObjectArray() );	}		/**	 * Return the report. 	 * @return filled subreport	 */	public SubreportTreeItem getReport() {		return (SubreportTreeItem) m_report;	}}
/* Copyright (c) 2003 to 2007 SimpleData Sarl http://simpledata.ch   * All rights reserved. * * This file is part of TariffEye Software  realeased under the  * GNU Public License. Redistributions of source code and binaries  * must retain the above copyright notice; see COPYING_Tariff-Eye.txt  * *//**  * Dispatcher package. Dispatcher have the function of  * deciding which workplace to apply in a given situation.  */ package com.simpledata.bc.components.worksheet.dispatcher;import com.simpledata.bc.components.TarifTreeItem;import com.simpledata.bc.components.TarifTreeVisitor;import com.simpledata.bc.datamodel.Dispatcher;import com.simpledata.bc.datamodel.WorkSheetContainer;/** * Abstract superclass of all dispatchers, connecting them  * to the datamodel part of the design.  *  * @author Simpledata SARL, 2004, all rights reserved.  * @version $Id: DispatcherAbstract.java,v 1.2 2007/04/02 17:04:23 perki Exp $  */public abstract class DispatcherAbstract 	extends Dispatcher implements TarifTreeItem {		/**	 * Constructor. 	 * Note: should not be called by itself. use WorkSheet#createWorkSheet(workSheet d,Class c)	 */	protected DispatcherAbstract( WorkSheetContainer parent, String title, String id, String key ) {		super(parent,title,id, key);	}		//------------------ XML ENCODING -----------------//		/** 	 * XML Constructor 	 */	public DispatcherAbstract() {		super();	}		/**	 * Passed the visitor, will visit the node with the right basic	 * case method. Any given node Foo in the tree must call back 	 * the visitor using the method caseFoo. 	 * @param v Visitor to call back into. 	 */	public abstract void visit(TarifTreeVisitor v);}